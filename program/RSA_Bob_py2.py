from backports.range import range as range3 #this is import form Python 3 for the range function

pBob= 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111

qBob= 1357911131517193133353739515355575971737577799193959799111113115117119131133135137139151153155157159171173175177179191193195197199311313315317319331333335337339351353355357359371373375377379391393395397399511513515517519531533535537539551553555557559571573575577579591593595597599711713715717719731733735737739751753755757759771

nBob = pBob*qBob
tBob = (pBob-1)*(qBob-1)
nAlice = 9817766666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666670379887169999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999874799999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999581325509666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666555969
eAlice = 5

#taken from https://www.geeksforgeeks.org/rsa-algorithm-cryptography/
def gcd(a,b): #find gcd between a and b
    if b==0: 
        return a 
    else: 
        return gcd(b,a%b) 

#taken from https://www.geeksforgeeks.org/rsa-algorithm-cryptography/
def getE(t): #find value of e
    for e in range3(2,t): 
        if gcd(e,t)== 1: 
            return e
    return None

eBob = getE(tBob)

#taken from https://www.geeksforgeeks.org/multiplicative-inverse-under-modulo-m/
def modInverse(a, m): #used to find d
    m0 = m 
    y = 0
    x = 1
  
    if (m == 1): 
        return 0
  
    while (a > 1): 
  
        # q is quotient 
        q = a // m 
  
        t = m 
  
        # m is remainder now, process 
        # same as Euclid's algo 
        m = a % m 
        a = t 
        t = y 
  
        # Update x and y 
        y = x - q * y 
        x = t 
  
    # Make x positive 
    if (x < 0): 
        x = x + m0 
  
    return x 
  
# Define d
################################################ 
#dBob = modInverse(eBob, tBob)
dBob = 5 #changing value of Bob's private key